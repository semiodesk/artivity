#! /usr/bin/env python

import gtk
import os
import subprocess, signal
from os.path import isfile
from os.path import isdir
from os.path import join
from os.path import expanduser
from os import system
from os import kill
from shutil import copyfile

class ArtivitySetup(gtk.Window):
	"""A simple graphical user interface for setting the Artivity preferences."""

	# Indicates if the REST API daemon is enabled and running
	enabled = False

	# Path of the current user's home directory
	home_dir = None;

	# Path of the REST API daemon .desktop file template
	desktop_src = "/usr/share/applications/artivity-apid.desktop"

	# Resolved autostart path of the REST APID daemon .desktop file
	desktop_dst = None;

	# File containing the process ID of a running REST API daemon
	pid_file = None;

	def __init__(self):
		"""Creates a new instance of the class."""
		gtk.Window.__init__(self)

		self.init()
		
		logo = gtk.image_new_from_file("/usr/share/icons/Artivity/32x32/artivity.png")

		title = gtk.Label()
		title.set_use_markup(gtk.TRUE)
		title.set_markup('<span size="20000">Preferences</span>')
		title.set_alignment(xalign = 0, yalign = 0)

		enableLog = gtk.CheckButton("Enable tracking your web browsing history in Activity Journal")
		enableLog.set_active(self.enabled)
		enableLog.connect("toggled", self.toggle_apid)
	
		doneButton = gtk.Button("Done")
		doneButton.set_size_request(100, 40)
		doneButton.connect("clicked", self.close)

		layout = gtk.Layout()
		layout.put(logo, 25, 10)
		layout.put(title, 65, 10)
		layout.put(enableLog, 63, 60)
		layout.put(doneButton, 435, 100)

		self.add(layout)

		self.connect("delete-event", gtk.main_quit)

	def init(self):
		"""Initialize the member variables."""
		self.home_dir = expanduser("~")
		self.pid_file = join(self.home_dir, ".artivity-apid.pid")
		self.desktop_dst = join(self.home_dir, ".config/autostart/artivity-apid.desktop")

		# Check if the autostart directory exists..
		autostart_dir = join(self.home_dir, ".config/autostart/")

		if not isdir(autostart_dir):
			os.makedirs(autostart_dir)

		self.enabled = isfile(self.pid_file) and isfile(self.desktop_dst)

	def toggle_apid(self, data):
		"""Toggle the execution status of the REST API daemon."""
		if self.enabled:
			self.disable_apid()
		else:
			self.enable_apid()		

	def enable_apid(self):
		"""Start the REST API daemon and enable autostart for next login."""
		print ""

		if isfile(self.desktop_src) and not isfile(self.desktop_dst):
			print ">> Copying API daemon autostart file", self.desktop_dst
			copyfile(self.desktop_src, self.desktop_dst)

		pid = self.get_apid_pid()

		if pid == -1:
			print ">> Starting API daemon with pid:"
			spawn('/usr/bin/artivity-apid', 'artivity-apid')

		print ""

		self.enabled = True

	def disable_apid(self):
		"""Disable the REST API daemon and disable autostart for next login."""
		if isfile(self.desktop_dst):
			print ""
			print ">> Removing API daemon autostart file", self.desktop_dst
			os.remove(self.desktop_dst)

		pid = self.get_apid_pid()

		if pid > 0:
			print ">> Stopping API daemon with pid", pid, ":"
			kill(pid, signal.SIGTERM)

		print ""

		self.enabled = False

	def get_apid_pid(self):
		"""Return the process ID of the currently running REST API daemon, if any."""
		if not isfile(self.pid_file): return -1;

		with file(self.pid_file) as f:
			return int(f.read())

	def close(self, widget, data=None):
        	gtk.main_quit()

# Based on: http://stackoverflow.com/questions/972362/spawning-process-from-python/972383#972383
def spawn(path_to_executable, *args):
    """Spawn a completely detached subprocess (i.e., a daemon).

    E.g. for mark:
    spawn("../bin/producenotify.py", "producenotify.py", "xx")
    """
    # fork the first time (to make a non-session-leader child process)
    try:
        pid = os.fork()
    except OSError, e:
        raise RuntimeError("1st fork failed: %s [%d]" % (e.strerror, e.errno))
    if pid != 0:
        # parent (calling) process is all done
        return

    # detach from controlling terminal (to make child a session-leader)
    os.setsid()

    try:
        pid = os.fork()
    except OSError, e:
        raise RuntimeError("2nd fork failed: %s [%d]" % (e.strerror, e.errno))
        raise Exception, "%s [%d]" % (e.strerror, e.errno)
    if pid != 0:
        # child process is all done
        os._exit(0)

    # redirect stdin, stdout and stderr to /dev/null
    os.open(os.devnull, os.O_RDWR)  # standard input (0)
    os.dup2(0, 1)
    os.dup2(0, 2)

    # and finally let's execute the executable for the daemon!
    try:
      os.execv(path_to_executable, args)
    except Exception, e:
      # oops, we're cut off from the world, let's just give up
      os._exit(255)

if( __name__ == "__main__" ):
	window = ArtivitySetup()
	window.set_title("")
	window.set_position(gtk.WIN_POS_CENTER_ALWAYS)
	window.resize(550, 150)
	window.show_all()

	gtk.gdk.threads_init()
	gtk.main()
